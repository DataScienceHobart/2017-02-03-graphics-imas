---
title: "Geolocation Journeys ArtMaps"
subtitle: 'Making visually pleasing maps from tracking data'
author: "Jaimie Cleeland and Mike Sumner"
date: "31 March 2017"
output: html_document
---

Load the required libraries.
```{r setup, include=FALSE}
library(rworldmap)
library(raster)
# library(raadtools)
library(graticule)
library(trip)
library(plyr)
data(countriesLow)
```

Read in a csv file with the data formatted into the following columns:
species, scientific_name, animal_id, tag_number, deployment_location, gmt, lon, lat.
```{r}
df <- read.csv("GLS_test_map2.csv", header=TRUE, stringsAsFactors=FALSE)
df$gmt <- as.POSIXct(df$gmt, format="%Y-%m-%d %H:%M:%S", tz="GMT")
df$animal_id[is.na(df$animal_id)] <- "unbanded"
df <- df[!duplicated(df[, c("gmt", "animal_id")]), ]
df <- df[order(df$species, df$animal_id, df$gmt), ]
```

Get topo for bathymetry contours.
I would like to have bathymetry, but don't want to be constrained by raadtools, so I can share the code. Possible???
```{r}
# topo1 <- readtopo("etopo2", xylim=extent(raster.map))
# topo1[topo1 > 0 ] <- 0
# cl1 <- rasterToContour(aggregate(topo1, fact=16, fun=mean))
```

Separate out each individual and make trip object
```{r}
animals <- unique(as.character(df$animal_id))
for(i in 1:length(animals)){
  uid <- df[df$animal_id==animals[i], ]
  uid <- uid[!is.na(uid$gmt),]
  coordinates(uid) <- c("lon", "lat")
  tr <- trip(uid, c("gmt", "animal_id"))
  tr <- tr[speedfilter(tr, max.speed = 45),]
  projection(tr) <- "+proj=longlat +datum=WGS84"
```
  
Set map extent. Currently testing two different projections to see if they will cover each individual track suitably.
I've used multiple if statements to adjust the map boundaries accordingly. Maybe worth improving on?
```{r}
  xmn <- round_any(extent(tr)[1]-10, 10, f=floor)
  xmx <- round_any(extent(tr)[2]+10, 10, f=ceiling)
  if(xmx>180){
    xmx2 <- xmx-360
  }
  ymx <- round_any(extent(tr)[4]+10, 10, f=ceiling)
  if(extent(tr)[3]<=-40){
    ymn <- -80
  } else {
    ymn <- round_any(extent(tr)[3]-10, 10, f=floor)
  }
  if(xmx-xmn>135&extent(tr)[3]<=-40){
     ymn <- -90
  }
  if(ymn==-90){
  raster.map <- raster(xmn=-180, xmx=180, ymn=ymn, ymx=ymx)
  mp <- crop(countriesLow, extent(raster.map))
  } else {
  raster.map <- raster(xmn=xmn, xmx=xmx, ymn=ymn, ymx=ymx)
  mp <- crop(countriesLow, extent(raster.map))
  }
```
  
Choose a map projections; wedge and polar
```{r}
  if(ymn==-90){
    prj <- "+proj=laea +lat_0=-60  +lon_0=180 +datum=WGS84 +ellps=WGS84 +no_defs"
  } else {
     prj <- "+proj=laea +lat_0=-50  +lon_0=180 +datum=WGS84 +ellps=WGS84 +no_defs"
  }
```
  
Transform data and map projection if required.
```{r}
  if(prj=="+proj=longlat +datum=WGS84"){
    w <- mp
    ptr <- tr
    # pcl1 <- cl1
  } else {
    w <- spTransform(mp, CRS(prj))
    ptr <- spTransform(tr, CRS(prj))
    # pcl1 <- spTransform(cl1, CRS(prj))
  }
```
  
Option to add graticule lines to map. Again a bunch of if statements to make them suitable for each track.
Needs some refining, as some graticules are overlapping.
```{r}
if(ymn== -90){
  xx <- seq(0, 360, 10); yy <- seq(-90, ymx, 10)
  g3 <- graticule(xx, yy, proj=projection(prj))
  g4 <- graticule(xx, ymx, proj=projection(prj))
} else {
  xx <- seq(-180, 180, 10)[seq(-180, 180, 10) %in% seq(xmn, xmx)]
  yy <- seq(-90, 90, 10)[seq(-90, 90, 10) %in% seq(ymn, ymx)]
  g3 <- graticule(xx, yy, proj=prj) #horizontal and vertical dotted
  g4 <- graticule(c(xmn, xmx), c(ymn, ymx), proj=prj)
}
if(xmx>180){
  xx2 <- seq(-180, xmx2, 10)[seq(-180, xmx2, 10) %in% seq(xmx, xmx2)]
  g5 <- graticule(seq(-180, xx2, 10), yy, proj=prj) #horizontal and vertical dotted
}
  g4labs <- graticule_labels(lats=yy[yy>=-70], yline=-20, xline=xmn+2, proj=projection(prj))
  pltg <- function() {
    p <- par(xpd=NA)
    text(coordinates(g4labs[!g4labs$islon, ]), lab=parse(text=g4labs$lab[!g4labs$islon]), pos=3, cex=1.4)
    par(p)
  }
```
  
Add colony markers. I have attempted to offset the labels from the markers...not consistently successful.
```{r}
  colony <- data.frame(lon=c(round(coordinates(uid)[1, 1], 2), round(coordinates(uid)[1, 1], 2)-0.5), lat=c(round(coordinates(uid)[1, 2], 2), round(coordinates(uid)[1, 2], 2)-0.5), name=c(uid$deployment_location[1], "label_pos"))
  coordinates(colony) <- c("lon", "lat")
  projection(colony) <- "+proj=longlat +datum=WGS84"
  colony <- spTransform(colony, CRS(projection(prj)))
```
  
Add track metadata.
```{r}
  species <- uid$species[1]
  sci_name <- paste0("(", uid$scientific_name[1], ")")
  animal_id <- as.character(uid$animal_id[1])
  tag_number <- uid$tag_number[1]
  deployment_location <- paste0(uid$deployment_location[1], " (", round(coordinates(uid)[1, 2], 2), ", ", round(coordinates(uid)[1, 1], 2), ")")
  deployment_date <- min(as.Date(uid$gmt))
  deployment_date <- format(deployment_date, "%d.%m.%Y")
  days_tracked <- as.numeric(difftime(max(as.Date(uid$gmt)), min(as.Date(uid$gmt)), units=c("days")))
  distance_travelled <- paste0(format(round(sum(spDists(coordinates(tr), longlat=TRUE, segments=TRUE)[spDists(coordinates(tr), longlat=TRUE, segments=TRUE)<650]), 0), big.mark=", ", scientific=FALSE), " km")
```
  
Save out map as pdf.
```{r}
  pdf(file=paste0(tag_number, "_", gsub(" ", "_", species), ".pdf"), width=8.27, height=11.69, paper="a4")
  layout(matrix(c(rep(1, 9), rep(2, 6)), 5, 3, byrow=TRUE))
  par(oma=c(1, 3, 1, 0), mar=c(0, 0, 0, 0), family="serif", bty="n")
```
  
Plot the map. As you can see I haven't been able to get the correct aspect ratio and the maps on the centre of the A4 page.
Ideally, we'd North up (well roughly) for all tracks as well...
```{r}
  plot(w, col="white", border=FALSE)
  # plot(pcl1, add=TRUE, col=grey(0.7, alpha=0.5))
  plot(g3, add=TRUE, lty=3)
  plot(ptr, col="red", border=FALSE, add=TRUE, pch=19, cex=0.4)
  lines(ptr, col="red", lwd=1.2)
  plot(g4, add=T)
  if(xmx>180){
   plot(g5, add=T, lty=3) 
  }
  plot(g4, add=T)
  plot(w, col="darkgrey", border=F, add=T)
  plot(colony[1, ], col="black", border=FALSE, add=TRUE, pch=19, cex=1.2)
  text(colony[2, ], labels=uid$deployment_location[1], cex=1.4, adj=0)
  pltg()
```

Plot metadata
```{r}
  plot(0:100, type="n", axes=F, xlab="", ylab="")
  mtext(bquote('Species: '~.(species)~italic(.(sci_name))), side=1, line=-17.9)
  mtext(bquote('Animal ID number: '~.(animal_id)), side=1, line=-16)
  mtext(bquote('Geolocator number: '~.(tag_number)), side=1, line=-14.2)
  mtext(bquote('Deployment location: '~.(deployment_location)), side=1, line=-12)
  mtext(bquote('Deployed: '~.(deployment_date)), side=1, line=-10)
  mtext(bquote('Days tracked: '~.(days_tracked)), side=1, line=-8)
  mtext(bquote('Total distance: '~.(distance_travelled)), side=1, line=-6)
```
  
```{r}
  dev.off()
}
```
